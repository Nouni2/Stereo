import cv2 as cv
import numpy as np

def finalCrop(left_img, left_mask, right_img, right_mask):
    """
    Crop the input images based on their masks to generate aligned image pairs.

    Parameters:
    - left_img: numpy array representing the left image.
    - left_mask: numpy array representing the mask of the left image.
    - right_img: numpy array representing the right image.
    - right_mask: numpy array representing the mask of the right image.

    Returns:
    - int: Always returns 0.

    The function performs the following steps:
    1. Converts the input masks to grayscale.
    2. Performs a bitwise AND operation between the right mask and itself using the left mask as a mask, resulting in a final mask.
    3. Uses the final mask to cut parts of the right image that are not contained in the left image, and vice versa.
    4. Identifies the contour of the final mask to determine the region of interest.
    5. Creates a bounding box around the region of interest.
    6. Crops both images based on the bounding box coordinates.
    7. Writes the cropped images to disk.
    """
    # Convert masks to grayscale
    left_mask = cv.cvtColor(left_mask, cv.COLOR_BGR2GRAY)
    right_mask = cv.cvtColor(right_mask, cv.COLOR_BGR2GRAY)
    print("gougoug")
    print(left_mask.size)
    print(right_mask.size)
    # Generate final mask using bitwise AND operation
    final_mask = cv.bitwise_and(right_mask, right_mask, mask=left_mask)
    print(final_mask.size)
    print("gougoug")
    # Crop parts of the images based on final mask
    right_img = cv.bitwise_and(right_img, right_img, mask=left_mask)
    left_img = cv.bitwise_and(left_img, left_img, mask=right_mask)
    print("IN finalCrop 1 ", left_img.size)

    # Find contour of final mask to determine region of interest
    contours, _ = cv.findContours(final_mask, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
    max_contour = max(contours, key=cv.contourArea)
    rect_m = cv.minAreaRect(max_contour)
    box_m = cv.boxPoints(rect_m)
    box_m = np.intp(box_m)

    # Extract coordinates of bounding box
    x_values_m, y_values_m = box_m[:, 0], box_m[:, 1]
    print(x_values_m," ", y_values_m)
    x_m = min(x_values_m)
    if x_m<0 :
        x_m = 0
    y_m = min(y_values_m)
    if y_m<0 :
        y_m = 0
    w_m = max(x_values_m) - min(x_values_m)
    h_m = max(y_values_m) - min(y_values_m)


    # Crop images based on bounding box coordinates
    cropped_image_final_1 = left_img[y_m:y_m + h_m, x_m:x_m + w_m]
    cropped_image_final_2 = right_img[y_m:y_m + h_m, x_m:x_m + w_m]
    print("IN finalCrop 2 ", cropped_image_final_1.size)
    return cropped_image_final_1, cropped_image_final_2

