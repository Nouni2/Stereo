
    #########################################################################################################
    #########################################################################################################
    ########                                                                                         ########
    ########   BOTH SVG FILE AND IMAGE FILE (.jpg, .png, .tiff, ...) MUST BE IN THE SAME DIRECTORY   ########
    ########                                                                                         ########
    #########################################################################################################
    #########################################################################################################

# POUR AMELIORER :


import glob
from glob import glob
from alignement_image import *
from utils.AffineHomography import *
from src.generation.SBS import *
from src.generation.anaglyph import *
from src.generation.polarised import *

svg_path = input("Your SVG file name ('name.svg') : ")
svg_path =  (os.path.normpath(rf"..\..\release\input" +"/" + svg_path  )).replace("\\", "/")
output_file_path = (os.path.normpath(rf"..\..\release\output")).replace("\\", "/")
# C:\SUPOP\pythonProject\Saint-Gilles-Croix-de-Vie.svg

    # <editor-fold desc="TEMP DIRECTORY HANDLING">
    # CREATING A TEMPORARY DIRECTORY TO WORK WITH
if not os.path.exists("temp"):
    os.makedirs("temp")
    print("Dossier créé :","temp")
else:
    print("Le dossier existe déjà :", "temp")

workpath = rf"../svg_exploit/temp"

def supprimer_dossier(dossier):
        if os.path.exists(dossier):
            os.rmdir(dossier)
            print("Dossier supprimé :", dossier)
        else:
            print("Le dossier n'existe pas :", dossier)

    # </editor-fold>

    # <editor-fold desc="Base block for extracting feature">
from utils.fonction_svg import process_image_svg
from utils.fonction_svg import generation_crop
# EXTRACT FEATURES FROM SVG FILE
[[w,h],coordL,coordR,coordS,homo,image_path] = process_image_svg(svg_path)
coord=[coordL,coordR,coordS]

# GENERATE CROPPED IMAGES
[left_path,right_path, left_mask_path, right_mask_path] = generation_crop(image_path, w, h, workpath, coord)
left_img,left_mask = cv.imread(left_path),cv.imread(left_mask_path)
right_img,right_mask = cv.imread(right_path),cv.imread(right_mask_path)
print("APRES GEN CROP ",left_img.size)
    # </editor-fold>

    # <editor-fold desc="Homography calculation (to be removed) and application">
    # Avec les exemples donnés dans le owncloud l'homographie est pas affine c'est donc une 3x3

if homo == None :
    homo = getAffHomography(left_path,right_path,'sift')

else :
    H = [float(i) for i in homo.split(",")]
    homo = np.array(H).reshape(2, 3)

# APPLY HOMOGRAPHY TO THE LEFT IMAGE AND ITS MASK
left_img = applyAffHomography(left_img,left_path, homo)
left_mask = applyAffHomography(left_mask,left_mask_path, homo)
print("APRES HOMO",left_img.size)
    # </editor-fold>

# FINAL CROP TO DELETE PARTS WHICH ARE NOT SHARED BY BOTH IMAGES
[left_img,right_img] = finalCrop(left_img, left_mask, right_img, right_mask)
print("APRES finalCrop",left_img.size)
save = input("Do you want to save result images before visualisation ? (y/n) : ")
if save == "y":
    file_name = input("Generic files name (without extension) : ")
    cv.imwrite(output_file_path+"/"+file_name+"_left_result.png",left_img)
    cv.imwrite(output_file_path+"/"+file_name+"_right_result.png",right_img)
elif save == "n":
    print("Not saved")
else :
    print("Invalid answer, files not saved")

print("Images prêtes à être visualisées")

    # <editor-fold desc="VISUALISATION">
while True :
    method = input("Enter visualization method : ")

    if method.upper()=='SBS' :
        sbs = sidebyside_show(left_img,right_img,resize_scale=200)
        if input("save side by side ? (y/n) : ")== "y":
            file_name = (svg_path.split(".")[-2]).split("/")[-1]
            cv.imwrite(output_file_path + "/" + file_name + "_SBS.png", sbs)

    if method.upper()=='ANAGLYPHE' or method.upper()=='ANAGLYPH':
        extension = left_path.split(".")[-1]
        ana = anaglyph_show(left_img,right_img,extension,resize_scale=50)
        if input("save anaglyph ? (y/n) : ")== "y":
            file_name = (svg_path.split(".")[-2]).split("/")[-1]
            cv.imwrite(output_file_path + "/" + file_name + "_ANAG.png", ana)

    if method.upper()=='POLARISED' or method.upper()=='POLARIZED'  :
        pola = polarised_show(left_img,right_img,resize_scale=100)
        if input("save polarised ? (y/n) : ")== "y":
            file_name = (svg_path.split(".")[-2]).split("/")[-1]
            cv.imwrite(output_file_path + "/" + file_name + "_POLA.png", pola)
    if method.upper() == "END":
        break
    else :
        print("Choose a valid visualisation method among {SBS, ANAGLYPH, POLARIZED} or to end terminate the program")
    # </editor-fold>

#supprimer_dossier(workpath)
